,ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
0,93969,comment,93920.0,93920.0,0,0,nraynaud,,,Bonne annee !<p>(first French !),1199131165.0
1,93968,comment,93864.0,93874.0,0,0,danielha,,,"It actually stopped indexing news.yc in the summer time (some minor thing tripped it up, but it hasn't been tended to). <p>We should probably put a message up telling people to stop using it, or link to this new one. Nice work.",1199131065.0
2,93967,comment,93920.0,93920.0,0,0,redorb,,,cheers and beers!,1199131059.0
3,93966,comment,93216.0,93755.0,0,0,edgeztv,,,"Using an example from a benchmarking suite to illustrate language conciseness doesn't make any sense.  We all know that conciseness is inversely proportional to speed.  Whoever wrote that Java code was trying to write the most performant, not the most concise code. He did a great job, by the way, since for that particular benchmark, Java outperforms Ruby by a factor of 20! (<a href=""http://shootout.alioth.debian.org/gp4/benchmark.php?test=sumcol&lang=all"" rel=""nofollow"">http://shootout.alioth.debian.org/gp4/benchmark.php?test=sum...</a>)<p>Sorry for initially assuming that you wrote the code.  I wasn't familiar with that site, so I didn't register your original allusion to it.",1199131052.0
4,93965,story,,,2,0,gps408,Pipelines Using Fibers in Ruby 1.9,http://pragdave.blogs.pragprog.com/pragdave/2007/12/pipelines-using.html,,1199130830.0
5,93964,comment,93888.0,93888.0,0,0,brlewis,,,"Your intuition is right.  MVC frameworks do not help individual hackers.  Their purpose is to make it harder to do bad things.  Making it easier to do good things is not a requirement.<p>On the other hand, it does look like good  client-side JavaScript frameworks provide a competitive advantage, if used judiciously.  I haven't investigated which is best yet.",1199130683.0
6,93963,comment,93888.0,93888.0,0,0,cturner,,,"> On the other hand, for web development I see no such\n> thing.<p>It's a good point. Web development does feel like it's far more of a chore than it should need to be.<p>It's still very difficult to have a development methodology that allows you to develop mega-pages (so as to offer a lot of functionality on one page and thereby keep the request/response loop down) without the codebase turning into spaghetti. I thought I'd done it at my last job, I've since spoken to the maintenance programmer, he's unimpressed, and that says 'failure' to me :). The combination I used for that was tapestry and cayenne and I still think it's the best grouping although Tapestry 5 will be a strong improvement (don't get into it yet though - the tutorial on the site isn't finished). Also, you're stuck with java if you do this.<p>> early days CGI programming with Perl?<p>There are huge advantages to using a templating system. If you want to understand why, have a think about how you'd implement an algorithm in CGI that allowed you to edit the first and last name for a list of people in a single page, and to have the resulting data factored into objects automatically before you start writing your handling code. Good templating is not new, but it is new to the mainstream. WebObjects was doing all this and more in the late nineties. But the API was so quirky, the end-user tools so poor and the system so expensive in its early years that few people got to benefit from it. Expect to see a bit of a renaissance from WebObjects - Apple have some top-notch people working on it and have really opened it up. (Still -I'm not sure how or if they'll be able to overcome the verbose and quirky API though.)<p>Coming up with a framework that can do mega-pages well is a problem I've revisited many times, and I'm not there yet. My latest attempt is at datamagi.org. This approach attempts to make the web server a dumb client that asks a 'logicbase' for the user's current position in the system, and then renders it to them. Basically - you define a state machine that is the application, and then the interface wraps around it. In this way you can develop dynamic webapps without touching a line of HTML. In time I'd like to come up with a description language that describes how data should be rendered, and then have this dumb-client webserver then lay out a webpage matching that view. I don't even have transactions properly worked out yet. But I do think this is the right approach to the problem. Once we have this it will be near-trivial to painlessly develop better user interfaces than the web browser.<p>The approach I'm taking on a web project I'm working on right now (that I need to work - hence not using my immature framework) is to use python and cherrypy, and do all the processing manually. It's cumbersome, but I find it quite rapid to refactor, and once I understand where the repetition points are I can work out my own framework.<p>Django looks cool. You could check out rails as well. I've avoided it because the ORM in that platform is primitive, and because I prefer python for lots of little reasons. I can't remember why I avoided Django - might have been a maturity thing. I'm very distrustful of heavy frameworks in general because I've been stung a few times by situations where I want to do something and can't work it out (or find that it's not possible because I haven't followed some disgusting 'convention' wired into the platform), whereas I find that if I develop a framework myself I don't get into that position. I had this with tapestry 3 - had to go to ridiculous lengths to get what in .ASP would have been called a 'page'-scoped variable.<p>For you - developing a framework would have the advantage that you'd understand the problems that frameworks solve. So when you go looking for a framework later on you'll know what you're looking for and why.<p>I love web development. :)",1199129546.0
7,93962,comment,93216.0,93545.0,0,0,nraynaud,,,"The base looks similar (space is function call, static types inference, currying, '->' for function definition etc.) because the common ancestor for haskell, o'caml, erlang and various others is ML, another language. <p>This is the same kind of relation between C, java and C",
8,93961,comment,93888.0,93888.0,0,0,superjared,,,"The reason I say ""no"" is because the designer I worked for had ridiculously high expectations. And with Django we were able to deliver to many of those expectations, but the ones we were slow with we heard about for a while.",1199128557.0
9,93960,story,,,2,0,terpua,PayPal Founder Peter Thiel Invests in Hooja,http://mashable.com/2007/12/31/hooja-funded/,,1199128501.0
10,93959,comment,93863.0,93863.0,0,0,randallsquared,,,"Okay, what these guys really need is to send the reply in a comment attached to the original blog post.  That would drive way more traffic, too, since they could answer people who are just ""lazyweb""ing, and don't even know about hoosgot.com in the first place.",1199128395.0
11,93958,comment,93920.0,93948.0,0,0,terpua,,,nice try :),1199128389.0
12,93957,comment,93888.0,93888.0,0,0,DarrenStuart,,,I think it depends on whether you have a favorite language to program in and if there is already a framework that fits your own need there is no need to waste energy. <p>I have created my own toolkit that sits over the top of the asp.net 2.0 and that fits my needs and gets used for all my projects. <p>I think in a few more years time your be able to use tools like Access to deploy web apps(I know you can do it to a point now).,1199128144.0
13,93956,comment,93920.0,93920.0,0,0,kirubakaran,,,Puthaandu Nal Vaazhthukkal.\n(Tamil),1199128125.0
14,93955,comment,93831.0,93831.0,0,0,mynameishere,,,,
15,93954,comment,93920.0,93920.0,0,0,mov,,,Feliz ano novo! (pt_BR),1199127788.0
16,93953,story,,,1,0,nickb,"Storm, Nugache lead dangerous new botnet barrage","http://searchsecurity.techtarget.com/originalContent/0,289142,sid14_gci1286808,00.html",,1199127655.0
